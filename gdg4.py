# -*- coding: utf-8 -*-
"""gdg4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-eXid6HCa9PXhQ7rv0eJ9wMKbYMqJETo
"""

import json
import google.generativeai as genai

# Configure Gemini API (Replace with your API key)
genai.configure(api_key="YOUR-API-KEY")
model = genai.GenerativeModel('gemini-2.0-flash')

class HealthcareChatbot:
    def __init__(self, health_data_file="health_data.json"):
        self.health_data = {}
        self.health_data_file = health_data_file
        self.load_health_data()

    def load_health_data(self):
        try:
            with open(self.health_data_file, "r") as f:
                self.health_data = json.load(f)
        except FileNotFoundError:
            self.health_data = {}

    def save_health_data(self):
        with open(self.health_data_file, "w") as f:
            json.dump(self.health_data, f)

    def get_user_profile(self, user_id):
        return self.health_data.get(user_id, {})

    def update_user_profile(self, user_id, profile_data):
        self.health_data[user_id] = profile_data
        self.save_health_data()

    def voice_chat(self, user_id, symptoms):
        prompt = f"Based on the following symptoms, provide a triage recommendation: {symptoms}. Answer with only: Seek Emergency Help, Seek Clinic Visit, or Home Care Advice."
        try:
            response+=' verify through healthcare professional:\n'
            response = model.generate_content(prompt)
            return response.text.strip() # Remove extra whitespace.
        except Exception as e:
            print(f"Gemini API Error: {e}")
            return "The service is unavailable at the moment." # Default in case of error.

    def video_consultation(self, user_id, visual_assessment_data):
        prompt = f"Based on the following visual assessment data, provide a medical recommendation: {visual_assessment_data}. Answer with only: Seek Emergency Help, Seek Clinic Visit, or Home Care Advice."
        try:
            response = model.generate_content(prompt)
            return response.text.strip()
        except Exception as e:
            print(f"Gemini API Error: {e}")
            #Code for confirmation by healthcare professional
            return "Service currently unavailable"

    def text_support(self, user_id, query):
        prompt = f"Provide medical advice or support based on the following query: {query}. Keep the answer brief. Answer with only: Seek Emergency Help, Seek Clinic Visit, or Home Care Advice, or a brief home care suggestion"
        prompt = f"Provide medical advice or support based on the following query: {query}. Keep the answer brief under the options-Seek Emergency Help, Seek Clinic Visit, or Home Care Advice, or a brief home care suggestion"
        try:
            response = model.generate_content(prompt)
            return response.text.strip()
        except Exception as e:
            print(f"Gemini API Error: {e}")
            return "Service is currently unavailable."

    def run_chatbot(self):
        user_id = input("Enter your User ID: ")
        if user_id not in self.health_data:
            print("New User, creating profile")
            profile_data = {}
            profile_data["name"] = input("Enter your Name: ")
            profile_data["age"] = int(input("Enter your Age: "))
            profile_data["medical_history"] = input("Enter your Medical History (if any): ")
            self.update_user_profile(user_id, profile_data)

        while True:
            print("\nChoose an option:")
            print("1. Voice Chat(On phone call)")
            print("2. Video Consultation")
            print("3. Text Support")
            print("4. Exit")

            choice = input("Enter your choice: ")

            if choice == "1":
                symptoms = input("Describe your symptoms: ")
                result = self.voice_chat(user_id, symptoms)
                print(f"Voice chat Result: {result}")
            elif choice == "2":
                visual_data = input("Describe the visual assessment data: ")
                result = self.video_consultation(user_id, visual_data)
                print(f"Video Consultation Result: {result}")
            elif choice == "3":
                query = input("Enter your query: ")
                result = self.text_support(user_id, query)
                print(f"Text Support Result: {result}")
            elif choice == "4":
                break
            else:
                print("Invalid choice. Please try again.")

if __name__ == "__main__":
    chatbot = HealthcareChatbot()
    chatbot.run_chatbot()